<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cxf="http://camel.apache.org/schema/cxf" xmlns:amq="http://activemq.apache.org/schema/core"
	xmlns:camel="http://camel.apache.org/schema/spring"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
        http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd
        http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd">

	<camel:keyStoreParameters id="signatureParams"
		password="{{client.store.password}}" resource="./clientstore.jks" />

	<bean class="org.apache.camel.component.jasypt.JasyptPropertiesParser"
		id="jasypt">
		<property name="password" value="master-secret" />
	</bean>
	<bean class="org.apache.camel.component.xmlsecurity.api.DefaultKeyAccessor"
		id="signatureAccessor">
		<property name="alias" value="esocialKey" />
		<property name="password" value="{{client.key.password}}" />
		<property name="keyStoreParameters" ref="signatureParams" />
	</bean>
	<bean class="org.apache.camel.processor.BodyInAggregatingStrategy"
		id="aggregatorStrategy" />

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.h2.Driver" />
		<property name="url"
			value="jdbc:h2:/home/leonardocarvalho/temp/banco/esocial;AUTO_SERVER=TRUE" />
		<property name="username" value="sa" />
		<property name="password" value="" />
	</bean>

	<bean class="org.apache.camel.component.sql.SqlComponent" id="sql">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- This creates an embedded ActiveMQ Broker -->
	<amq:broker persistent="false" useJmx="true">
		<amq:transportConnectors>
			<amq:transportConnector uri="tcp://localhost:0" />
		</amq:transportConnectors>
	</amq:broker>

	<!-- Lets connect the Camel ActiveMQ component to the embedded broker. See 
		http://camel.apache.org/activemq.html for more information. -->
	<bean class="org.apache.activemq.camel.component.ActiveMQComponent"
		id="activemq">
		<property name="brokerURL" value="vm://localhost?create=false" />
		<property name="userName" value="admin" />
		<property name="password" value="admin" />
	</bean>

	<bean id="xpathsToIdAttributesBean" class="java.util.ArrayList">
		<constructor-arg type="java.util.Collection">
			<list>
				<bean
					class="org.apache.camel.component.xmlsecurity.api.XmlSignatureHelper"
					factory-method="getXpathFilter">
					<constructor-arg type="java.lang.String" value="/eSocial/evtAdmissao/@id" />
				</bean>
			</list>
		</constructor-arg>
	</bean>


	<cxf:cxfEndpoint
		address="http://localhost:8080/esocial-ws/ServicoEnviarLoteEventos?wsdl"
		id="ServicoEnviarLoteEventosEndpoint" />

	<camelContext id="camelContext-eSocial" xmlns="http://camel.apache.org/schema/spring"
		trace="true">
		<propertyPlaceholder id="properties"
			location="classpath:config.properties" propertiesParserRef="jasypt" />
		<route id="_geraLoteEventosAdmissaoRoute">
			<from id="_fromEntradaBancoXMLEventosAdmissao"
				uri="sql:{{sql.selectTableLotesXMLEventosAdmissao}}?onConsume={{sql.updateTableLotesXMLEventosAdmissao}}&amp;consumer.delay=3000" />
			<setHeader headerName="eventoID">
				<simple>${body[id]}</simple>
			</setHeader>
			<setHeader headerName="grupo">
				<simple>${body[grupo]}</simple>
			</setHeader>
			<log id="_log" message="${body[xml]}]" />
			<setBody>
				<simple>${body[xml]}</simple>
			</setBody>
			<enrich id="_enrichXMLEventoAdmissao">
				<constant>direct:enrichXMLEventoAdmissaoRoute</constant>
			</enrich>
			<to id="_toGeraLoteXMLEventosAdmissaoRoute" uri="direct:geraLoteXMLEventosAdmissaoRoute" />
		</route>

		<route id="_enrichXMLEventoAdmissaoRoute">
			<from id="_fromEnrichXMLEventoAdmissaoRoute" uri="direct:enrichXMLEventoAdmissaoRoute" />
			<setHeader headerName="eventoId" id="_setEventoId">
				<xpath resultType="java.lang.String">eSocial/evtAdmissao/@id</xpath>
			</setHeader>
			<to id="_toControlaAssinaturaXMLEventoAdmissao" uri="direct:assinaXMLAssinaEventoAdmissaoRoute" />
			<convertBodyTo id="_convertBodyToString" type="java.lang.String" />
			<to id="_toFreeMarkerEventosAdmissao" uri="freemarker:EventosAdmissao.ftl" />
		</route>

		<route id="_assinaXMLAssinaEventoAdmissaoRoute">
			<from id="_fromAssinaXMLAssinaEventoAdmissaoRoute" uri="direct:assinaXMLAssinaEventoAdmissaoRoute" />
			<setHeader headerName="CamelXmlSignatureMessageIsPlainText"
				id="_setCamelXmlSignatureMessageIsPlainText">
				<simple>false</simple>
			</setHeader>
			<to id="_toAssinaXMLEventoAdmissao"
				uri="xmlsecurity:sign://detached?keyAccessor=#signatureAccessor&amp;plainText=true&amp;prefixForXmlSignatureNamespace=&amp;xpathsToIdAttributes=#xpathsToIdAttributesBean&amp;schemaResourceUri=Evento.xsd&amp;omitXmlDeclaration=true" />
		</route>

		<route id="_geraLoteXMLEventosAdmissaoRoute">
			<from id="_fromEntradaXMLEventosAdmissaoRoute" uri="direct:geraLoteXMLEventosAdmissaoRoute" />
			<aggregate strategyRef="aggregatorStrategy" completionSize="50"
				completionTimeout="3000">
				<correlationExpression>
					<simple>header.grupo</simple>
				</correlationExpression>
				<log id="_logSplitXMLLoteEventosAdmissao" message="Gerando lote [Número:${header.CamelAggregatedIndex}]" />
				<to id="_toFreeMarkerEnvioLoteEventosAdmissao" uri="freemarker:EnvioLoteEventosAdmissao.ftl" />
				<to id="_to1" uri="validator:XSD/Envio/EnvioLoteEventos-v1_1_0.xsd"/>
				<setHeader headerName="CamelFileName" id="_setHeaderCamelFileName">
					<simple>EventosAdmissaoLote-${date:now:yyyyMMddHHmmss.SSS}.xml
					</simple>
				</setHeader>
				<multicast id="_multicastWSBD">
					<to id="_toLotesXMLEventosAdmissao" uri="file:{{file.directory}}/LotesXMLEventosAdmissao" />
					<to id="_toAMQLOTESESOCIAL" uri="activemq:queue:LOTES_ESOCIAL" />
				</multicast>
			</aggregate>
		</route>

		<route id="_enviaLoteXMLEventosAdmissaoRoute">
			<from id="_fromLotesXMLEventosAdmissaoAssinados" uri="activemq:queue:LOTES_ESOCIAL" />
			<convertBodyTo id="_convertBodyTo1" type="java.lang.String" />
			<to id="_toFreemarkerEnviaLoteSOAPRequestTemplate" uri="freemarker:EnviaLoteSOAPRequestTemplate.ftl" />
			<log id="_logEnviandoLoteXMLEventosAdmissao"
				message="Enviando xmlEvento Eventos Admissão [xmlEvento: ${file:name}]" />
			<to id="_toCXFServicoEnviarLoteEventos"
				uri="cxf:bean:ServicoEnviarLoteEventosEndpoint?dataFormat=MESSAGE" />
		</route>

		<route id="_criaTabelaLotesXMLEventosAdmissaoRoute">
			<from id="_fromEntradaXMLEventosAdmissao" uri="file:{{file.directory}}/EntradaXMLEventosAdmissao" />
			<log id="_logCriandoTabelaLotesXMLEventosAdmissao" message="Criando	a tabela de Lotes Eventos Admissão" />
			<to id="_toSQLRemoveTabelaLotesXMLEventosAdmissao" uri="sql:{{sql.dropTableLotesXMLEventosAdmissao}}" />
			<to id="_toSQLCriaTabelaLotesXMLEventosAdmissao" uri="sql:{{sql.createTableLotesXMLEventosAdmissao}}" />
			<convertBodyTo type="java.lang.String" />
			<split id="_splitEventosAdmissao" strategyRef="aggregatorStrategy"
				streaming="true">
				<tokenize token="eSocial" xml="true" />
				<wireTap id="_wireTapGravaEnventosDataBase" uri="sql:{{sql.insertTableLotesXMLEventosAdmissao}}">
					<setHeader headerName="eventoID" id="_setEventoIdCarga">
						<xpath resultType="java.lang.String">eSocial/evtAdmissao/@id</xpath>
					</setHeader>
					<setHeader headerName="xmlEvento">
						<simple>${body}</simple>
					</setHeader>
				</wireTap>
				<log id="_logTabelaLotesXMLEventosAdmissaoCriadaComSucesso"
					message="Tabela Lotes Eventos Admissão criada e preenchida com sucesso!" />
			</split>
		</route>
	</camelContext>
</beans>